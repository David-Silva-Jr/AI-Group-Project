using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

public class PExploit : I_Policy
{
    private Random rand; // System.Random

    public PExploit(int seed){
        rand = new Random(seed);
    }

    // Note that ops should only contain actions available from state_as_string
    public char GetAction(QTable table, string state_as_string, List<char> ops){
        if(ops.Contains('p')){
            return 'p';
        }

        if(ops.Contains('d')){
            return 'd';
        }

        // Gets all operators tied for most valuable
        // Checking for difference rather than equality because of floating-point inaccuracy
        List<char> maxOps = new List<char>(ops.Where(e => (table[state_as_string, e] - table[state_as_string].Values.Max()) < 0.0001f));

        // Do best action 80% of the time, and random action otherwise
        int selection;
        float roll = (float)rand.NextDouble();
        if(roll < 0.8f){
            selection = rand.Next(maxOps.Count);
            return maxOps[selection];
        }

        selection = rand.Next(ops.Count); 
        return ops[selection];
    }
}
